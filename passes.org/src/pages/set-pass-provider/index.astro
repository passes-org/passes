---
import { zfd } from "zod-form-data";
import DocumentLayout from "../../layouts/DocumentLayout.astro";
import { getUserPassProvider, setUserPassProvider } from "../../lib/userPassProvider";
import { z } from "zod";

const FormDataSchema = zfd.formData({
  provider: zfd.text().pipe(z.string().url()),
  return: zfd.text().pipe(z.string().url()),
});

// Handle POST submissions
if (Astro.request.method === "POST") {
  const {
    provider: newProvider,
    return: returnURL,
  } = FormDataSchema.parse(await Astro.request.formData());

  if (!newProvider || !returnURL) {
    return new Response("Missing `provider` or `return` form field", { status: 400 });
  }

  setUserPassProvider(Astro, newProvider);
  return Astro.redirect(returnURL);
}

// Handle unsupported request methods
if (!["GET", "OPTIONS"].includes(Astro.request.method)) {
  return new Response("Unsupported request method", { status: 405 });
}

// Handle GET requests
const currentProvider = getUserPassProvider(Astro);
const newProvider = Astro.url.searchParams.get("provider");
const returnURL = Astro.url.searchParams.get("return");

if (!newProvider || !returnURL) {
  throw new Error("Missing `provider` or `return` search param");
}

// If the user is already using the new provider, do not present a confirmation UI
if (!currentProvider || currentProvider === newProvider) {
  setUserPassProvider(Astro, newProvider);
  return Astro.redirect(returnURL);
}
---

<DocumentLayout>
  <!-- Page Container -->
  <div class="flex-1 flex flex-col items-center justify-center">
    <!-- Dialog -->
    <main class="border border-black dark:border-white rounded p-5 gap-6 flex flex-col text-center">
      {newProvider && (
        <>
          {/* Provider Favicon */}
          <div class="w-[60px] h-[60px] rounded-xl p-[3px] -mt-[50px] border-black dark:border-white border bg-white dark:bg-black self-center">
            <img
              src={`/api/favicon?uri=${encodeURIComponent(newProvider)}`}
              alt="Provider Favicon"
              class="w-full h-full object-contain rounded-[9px]"
            />
          </div>
          
          {/* Title */}
          <div class="space-y-2">
            <div class="text-xl font-bold">
              {new URL(newProvider).hostname}
            </div>
            <div class="text-xl">Wants To Be Your Pass Provider</div>
          </div>
          
          {/* Notice */}
          <div class="bg-black/5 dark:bg-white/5 py-4 px-2 text-opacity-50">
            You will receive future pass requests here.
          </div>

          {/* Actions */}
          <div class="flex gap-5">
            <button onclick={`window.location.assign("${returnURL}")`} class="p-3 border border-black dark:border-white rounded-sm flex-1" type="button">
              Don't Allow
            </button>

            <form
              action="/set-pass-provider"
              method="post"
              class="p-3 bg-black text-white dark:bg-white dark:text-black rounded-sm flex-1"
            >
              <input
                type="text"
                name="provider"
                value={newProvider}
                hidden
              />
              <input
                type="text"
                name="return"
                value={returnURL}
                hidden
              />

              <button type="submit">Allow</button>
            </form>
          </div>
        </>
      )}
    </main>
  </div>
</DocumentLayout>